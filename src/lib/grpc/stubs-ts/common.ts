// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "common.proto" (package "common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.TokenLamports
 */
export interface TokenLamports {
    /**
     * @generated from protobuf field: uint64 amount = 1;
     */
    amount: bigint;
    /**
     * @generated from protobuf field: uint32 decimals = 2;
     */
    decimals: number;
}
/**
 * @generated from protobuf message common.Decimal
 */
export interface Decimal {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message common.TokenAddress
 */
export interface TokenAddress {
    /**
     * @generated from protobuf field: string mint = 1;
     */
    mint: string;
}
/**
 * @generated from protobuf message common.UnixTimestamp
 */
export interface UnixTimestamp {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
}
/**
 * @generated from protobuf enum common.QuoteKind
 */
export enum QuoteKind {
    /**
     * @generated from protobuf enum value: SOL = 0;
     */
    SOL = 0,
    /**
     * @generated from protobuf enum value: USDC = 1;
     */
    USDC = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class TokenLamports$Type extends MessageType<TokenLamports> {
    constructor() {
        super("common.TokenLamports", [
            { no: 1, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "decimals", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TokenLamports>): TokenLamports {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0n;
        message.decimals = 0;
        if (value !== undefined)
            reflectionMergePartial<TokenLamports>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenLamports): TokenLamports {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 amount */ 1:
                    message.amount = reader.uint64().toBigInt();
                    break;
                case /* uint32 decimals */ 2:
                    message.decimals = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenLamports, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 amount = 1; */
        if (message.amount !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.amount);
        /* uint32 decimals = 2; */
        if (message.decimals !== 0)
            writer.tag(2, WireType.Varint).uint32(message.decimals);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.TokenLamports
 */
export const TokenLamports = new TokenLamports$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Decimal$Type extends MessageType<Decimal> {
    constructor() {
        super("common.Decimal", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Decimal>): Decimal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<Decimal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Decimal): Decimal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Decimal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.Decimal
 */
export const Decimal = new Decimal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenAddress$Type extends MessageType<TokenAddress> {
    constructor() {
        super("common.TokenAddress", [
            { no: 1, name: "mint", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TokenAddress>): TokenAddress {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mint = "";
        if (value !== undefined)
            reflectionMergePartial<TokenAddress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenAddress): TokenAddress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mint */ 1:
                    message.mint = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenAddress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string mint = 1; */
        if (message.mint !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.TokenAddress
 */
export const TokenAddress = new TokenAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnixTimestamp$Type extends MessageType<UnixTimestamp> {
    constructor() {
        super("common.UnixTimestamp", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UnixTimestamp>): UnixTimestamp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<UnixTimestamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnixTimestamp): UnixTimestamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnixTimestamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.UnixTimestamp
 */
export const UnixTimestamp = new UnixTimestamp$Type();
