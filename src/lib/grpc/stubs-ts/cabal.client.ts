// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "cabal.proto" (package "cabal", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CabalRpc } from "./cabal";
import type { DeleteOrders } from "./orders";
import type { PlaceLimitOrdersResponce } from "./orders";
import type { TokenLimitOrders } from "./orders";
import type { TokenAddress } from "./common";
import type { Buy } from "./cabal";
import type { Sell } from "./cabal";
import type { Pong } from "./cabal";
import type { Ping } from "./cabal";
import type { TradeResponse } from "./cabal";
import type { TokenTradeEventSub } from "./cabal";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { TradeEventResponse } from "./cabal";
import type { TradeEventSub } from "./cabal";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserResponse } from "./cabal";
import type { UserActionSub } from "./cabal";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service cabal.CabalRpc
 */
export interface ICabalRpcClient {
    /**
     * @generated from protobuf rpc: UserActivityUni(cabal.UserActionSub) returns (stream cabal.UserResponse);
     */
    userActivityUni(input: UserActionSub, options?: RpcOptions): ServerStreamingCall<UserActionSub, UserResponse>;
    /**
     * @generated from protobuf rpc: TradesUni(cabal.TradeEventSub) returns (stream cabal.TradeEventResponse);
     */
    tradesUni(input: TradeEventSub, options?: RpcOptions): ServerStreamingCall<TradeEventSub, TradeEventResponse>;
    /**
     * @generated from protobuf rpc: SubscribeToken(cabal.TokenTradeEventSub) returns (cabal.TradeResponse);
     */
    subscribeToken(input: TokenTradeEventSub, options?: RpcOptions): UnaryCall<TokenTradeEventSub, TradeResponse>;
    /**
     * @generated from protobuf rpc: TradePing(cabal.Ping) returns (cabal.Pong);
     */
    tradePing(input: Ping, options?: RpcOptions): UnaryCall<Ping, Pong>;
    /**
     * @generated from protobuf rpc: UserPing(cabal.Ping) returns (cabal.Pong);
     */
    userPing(input: Ping, options?: RpcOptions): UnaryCall<Ping, Pong>;
    /**
     * @generated from protobuf rpc: MarketSell(cabal.Sell) returns (cabal.TradeResponse);
     */
    marketSell(input: Sell, options?: RpcOptions): UnaryCall<Sell, TradeResponse>;
    /**
     * @generated from protobuf rpc: MarketBuy(cabal.Buy) returns (cabal.TradeResponse);
     */
    marketBuy(input: Buy, options?: RpcOptions): UnaryCall<Buy, TradeResponse>;
    /**
     * @generated from protobuf rpc: GetTokenLimitOrders(common.TokenAddress) returns (orders.TokenLimitOrders);
     */
    getTokenLimitOrders(input: TokenAddress, options?: RpcOptions): UnaryCall<TokenAddress, TokenLimitOrders>;
    /**
     * @generated from protobuf rpc: PlaceLimitOrders(orders.TokenLimitOrders) returns (orders.PlaceLimitOrdersResponce);
     */
    placeLimitOrders(input: TokenLimitOrders, options?: RpcOptions): UnaryCall<TokenLimitOrders, PlaceLimitOrdersResponce>;
    /**
     * @generated from protobuf rpc: DeleteLimitOrders(orders.DeleteOrders) returns (orders.PlaceLimitOrdersResponce);
     */
    deleteLimitOrders(input: DeleteOrders, options?: RpcOptions): UnaryCall<DeleteOrders, PlaceLimitOrdersResponce>;
}
/**
 * @generated from protobuf service cabal.CabalRpc
 */
export class CabalRpcClient implements ICabalRpcClient, ServiceInfo {
    typeName = CabalRpc.typeName;
    methods = CabalRpc.methods;
    options = CabalRpc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: UserActivityUni(cabal.UserActionSub) returns (stream cabal.UserResponse);
     */
    userActivityUni(input: UserActionSub, options?: RpcOptions): ServerStreamingCall<UserActionSub, UserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserActionSub, UserResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TradesUni(cabal.TradeEventSub) returns (stream cabal.TradeEventResponse);
     */
    tradesUni(input: TradeEventSub, options?: RpcOptions): ServerStreamingCall<TradeEventSub, TradeEventResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TradeEventSub, TradeEventResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToken(cabal.TokenTradeEventSub) returns (cabal.TradeResponse);
     */
    subscribeToken(input: TokenTradeEventSub, options?: RpcOptions): UnaryCall<TokenTradeEventSub, TradeResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TokenTradeEventSub, TradeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TradePing(cabal.Ping) returns (cabal.Pong);
     */
    tradePing(input: Ping, options?: RpcOptions): UnaryCall<Ping, Pong> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Ping, Pong>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UserPing(cabal.Ping) returns (cabal.Pong);
     */
    userPing(input: Ping, options?: RpcOptions): UnaryCall<Ping, Pong> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Ping, Pong>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MarketSell(cabal.Sell) returns (cabal.TradeResponse);
     */
    marketSell(input: Sell, options?: RpcOptions): UnaryCall<Sell, TradeResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<Sell, TradeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MarketBuy(cabal.Buy) returns (cabal.TradeResponse);
     */
    marketBuy(input: Buy, options?: RpcOptions): UnaryCall<Buy, TradeResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<Buy, TradeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTokenLimitOrders(common.TokenAddress) returns (orders.TokenLimitOrders);
     */
    getTokenLimitOrders(input: TokenAddress, options?: RpcOptions): UnaryCall<TokenAddress, TokenLimitOrders> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<TokenAddress, TokenLimitOrders>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlaceLimitOrders(orders.TokenLimitOrders) returns (orders.PlaceLimitOrdersResponce);
     */
    placeLimitOrders(input: TokenLimitOrders, options?: RpcOptions): UnaryCall<TokenLimitOrders, PlaceLimitOrdersResponce> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TokenLimitOrders, PlaceLimitOrdersResponce>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteLimitOrders(orders.DeleteOrders) returns (orders.PlaceLimitOrdersResponce);
     */
    deleteLimitOrders(input: DeleteOrders, options?: RpcOptions): UnaryCall<DeleteOrders, PlaceLimitOrdersResponce> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteOrders, PlaceLimitOrdersResponce>("unary", this._transport, method, opt, input);
    }
}
